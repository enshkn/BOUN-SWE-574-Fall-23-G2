{
    "baseFreezed": {
        "scope": "dart",
        "prefix": "baseFreezed",
        "body": [
            "import 'package:busenet/busenet.dart';",
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "",
            "part '$2.freezed.dart';",
            "part '$2.g.dart';",
            "",
            "@freezed",
            "class $1 extends BaseEntity<$1> with _$$1 {",
            "  const factory $1($3) = _$1;",
            "  const $1._();",
            "  factory $1.initial() => const $1();",
            "  factory $1.fromJson(Map<String, dynamic> data) => _$${1}FromJson(data);",
            "",
            "  @override",
            "  $1 fromJson(dynamic data) => $1.fromJson(data as Map<String, dynamic>);",
            "}"
        ],
        "description": "Created a object with freezed"
    },
    "baseState": {
        "scope": "dart",
        "prefix": "cubitState",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import '../core/base_state.dart';",
            "",
            "part '$2_state.freezed.dart';",
            "",
            "@freezed",
            "class $1State extends BaseState with _$$1State {",
            "  const factory $1State({ @Default(false) bool isLoading, $3}) = _$1State;",
            "  factory $1State.initial() => const $1State();",
            "}"
        ],
        "description": "Created a state with freezed"
    },
    "baseCubit": {
        "scope": "dart",
        "prefix": "baseCubit",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "@injectable",
            "class $1Cubit extends BaseCubit<$1State> {",
            "  $1Cubit() : super($1State.initial());",
            "",
            "  void init() {}",
            "",
            "  @override",
            "  void setLoading(bool loading) {",
            "    safeEmit(state.copyWith(isLoading: loading));",
            "  }",
            "}"
        ],
        "description": "Created a cubit with base class"
    },
    "cubitBuilder": {
        "scope": "dart",
        "prefix": "cubitBuilder",
        "body": [
            "BlocProvider(",
            "  create: (context) => getIt<$1Cubit>(),",
            "  child: BlocConsumer<$1Cubit, $1State>(",
            "    listener: (context, state) {},",
            "    builder: (context, state) {",
            "     return const Scaffold();",
            "    }",
            "  ),",
            ");"
        ],
        "description": "Created a cubit builder"
    },
    "baseCubitBuilder": {
        "scope": "dart",
        "prefix": "baseCubitBuilder",
        "body": [
            "BaseBlocView<$1, $2>(",
            "  onModelReady: (model) {},",
            "  listener: (context, $2 state) {},",
            "  builder: (context, $2 state) {",
            "    return Scaffold();",
            "  },",
            ");"
        ],
        "description": "Created a base cubit builder"
    },
    "baseView": {
        "scope": "dart",
        "prefix": "baseView",
        "body": [
            "BaseView<$1, $2>(",
            "  onCubitReady: (cubit) {",
            "    cubit.setContext(context);",
            "  },",
            "  builder: (context, $1 cubit, $2 state) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text(''),",
            "      ),",
            "      body: Container(),",
            "    );",
            "  },",
            ");"
        ],
        "description": "Created a base cubit builder"
    },
    "baseIRepo": {
        "scope": "dart",
        "prefix": "baseIRepo",
        "body": [
            "abstract class I$1Repository extends BaseRepository {",
            "  I$1Repository(super.manager);",
            "}"
        ],
        "description": "Created a domain layer repository"
    },
    "baseInfraRepo": {
        "scope": "dart",
        "prefix": "baseInfraRepo",
        "body": [
            "@LazySingleton(as: I$1Repository)",
            "class $1Repository extends I$1Repository {",
            "  $1Repository(super.manager);",
            "}"
        ],
        "description": "Created a infrastructure layer repository"
    },
    "baseRequest": {
        "scope": "dart",
        "prefix": "baseRequest",
        "body": [
            "final response = await manager.fetch<$1, $2>(NetworkPaths.$3, type: HttpTypes.$4, parserModel: $1(),);",
            "",
            "switch (response.statusCode) {",
            "  case 1:",
            "    final status = response.status ?? false;",
            "    if(!status) return left(Failure(message: response.errorMessage));",
            "",
            "    return right($5);",
            "  default:",
            "    return left(Failure(message: response.errorMessage));",
            "}"
        ],
        "description": "Created a request in repository"
    },
    "baseEnum": {
        "scope": "dart",
        "prefix": "baseEnum",
        "body": [
            "enum $1 {",
            "",
            "  const $1(this.value);",
            "  final $2 value;",
            "",
            "  static $1 fromValue(int value) {",
            "    return $1.values.firstWhere((el) => el.value == value);",
            "  }",
            "}"
        ],
        "description": "Created a base enum"
    },
    "baseResult": {
        "scope": "dart",
        "prefix": "baseResult",
        "body": [
            "setLoading(true);",
            "final result = await _$1Repository.$2($3);",
            "setLoading(false);",
            "result.fold(",
            "  (failure) => showNotification(failure.message ?? '', isError: true),",
            "  (data) {},",
            ");"
        ],
        "description": "Created a base result for repository's method"
    },
}